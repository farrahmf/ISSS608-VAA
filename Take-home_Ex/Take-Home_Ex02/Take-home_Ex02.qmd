---
title: "Take-home Exercise 2"
author: "farrahmf"
---

## **Data Viz Critique**

TBC

## **Alternative Design**

TBC

### Launch Tidyverse and Import Data

We will only be using Tidyverse.

```{r}
pacman::p_load(tidyverse)
pop_data <- read_csv("data/respopagesextod2022.csv")
```

### Preparing the Data

We need to identify the top 9 planning areas by resident count, as follows:

```{r}
pop_data %>%										
  group_by(PA) %>%						
  summarise_at(vars(Pop),				
               list(Total_Residents = sum)) %>%
  arrange(desc(Total_Residents)) 
```

We create a subset of the original dataset with only the nine planning areas we need. To ensure that the planning areas are displayed in descending order of resident count, we can insert the order number before each planning area name, using mutate() and replace().

```{r}
top_nine <- pop_data %>%
  filter(PA %in% c('Bedok', 'Tampines',  'Jurong West',
                   'Sengkang', 'Woodlands', 'Hougang',
                   'Yishun', 'Choa Chu Kang', 'Punggol')) %>%
  mutate(PA = replace(PA, PA == "Bedok", "1. Bedok")) %>%
  mutate(PA = replace(PA, PA == "Tampines", "2. Tampines")) %>%
  mutate(PA = replace(PA, PA == "Jurong West", "3. Jurong West")) %>%
  mutate(PA = replace(PA, PA == "Sengkang", "4. Sengkang")) %>%
  mutate(PA = replace(PA, PA == "Woodlands", "5. Woodlands")) %>%
  mutate(PA = replace(PA, PA == "Hougang", "6. Hougang")) %>%
  mutate(PA = replace(PA, PA == "Yishun", "7. Yishun")) %>%
  mutate(PA = replace(PA, PA == "Choa Chu Kang", "8. Choa Chu Kang")) %>%
  mutate(PA = replace(PA, PA == "Punggol", "9. Punggol")) 
```

We then select only the columns we want, and group the data so that we have a sub-total count of residents for each age group for each gender.

```{r}
final_data <- top_nine %>%  
  select(PA, AG, Sex, Pop) %>%
  group_by(PA, AG, Sex) %>%
  summarise_at(vars(Pop), list(Count = sum))
```

To make the y-axis (i.e. age groups) more readable and to ensure that it correctly displays values in ascending order, we can indicate only the lower limit of each group and convert the values, which type is currently characters, to numbers.

```{r}
final_data <- final_data %>%
  mutate(AG = replace(AG, AG == "0_to_4", 0)) %>%
  mutate(AG = replace(AG, AG == "5_to_9", 5)) %>%
  mutate(AG = replace(AG, AG == "10_to_14", 10)) %>%
  mutate(AG = replace(AG, AG == "15_to_19", 15)) %>%
  mutate(AG = replace(AG, AG == "20_to_24", 20)) %>%
  mutate(AG = replace(AG, AG == "25_to_29", 25)) %>%
  mutate(AG = replace(AG, AG == "30_to_34", 30)) %>%
  mutate(AG = replace(AG, AG == "35_to_39", 35)) %>%
  mutate(AG = replace(AG, AG == "40_to_44", 40)) %>%
  mutate(AG = replace(AG, AG == "45_to_49", 45)) %>%
  mutate(AG = replace(AG, AG == "50_to_54", 50)) %>%
  mutate(AG = replace(AG, AG == "55_to_59", 55)) %>%
  mutate(AG = replace(AG, AG == "60_to_64", 60)) %>%
  mutate(AG = replace(AG, AG == "65_to_69", 65)) %>%
  mutate(AG = replace(AG, AG == "70_to_74", 70)) %>%
  mutate(AG = replace(AG, AG == "75_to_79", 75)) %>%
  mutate(AG = replace(AG, AG == "80_to_84", 80)) %>%
  mutate(AG = replace(AG, AG == "85_to_89", 85)) %>%
  mutate(AG = replace(AG, AG == "90_and_over", 90)) %>%
  mutate_at(c('AG'), as.numeric)
```

To reverse the bars for the male counts, we create another column which has the female count as a positive number and the male count as a negative number.

```{r}
final_data <- final_data %>%
  group_by(Sex) %>% 
  mutate(Population = ifelse(Sex == "Females", Count,-Count))
```

Then we plot the age-sex pyramids for each planning area, in a trellis display.

```{r}
plotted <- ggplot(final_data, aes(x = AG, Population, fill = Sex)) + 
  geom_bar(data = filter(final_data, Sex == "Females"), stat = "identity") + 
  geom_bar(data = filter(final_data, Sex == "Males"),  stat = "identity") + 
  scale_y_continuous(breaks = seq(-10000, 10000, 2500), 
                     labels = abs(seq(-10000, 10000, 2500))) +
  scale_x_continuous(breaks = seq(0, 90, 5)) +
  coord_flip() +
  facet_wrap(~ PA) +
  labs(x = "Lower Limit of Age Group", y = "Resident Count",
       title = "Age-Sex Pyramids of 9 Most Populous Planning Areas in Singapore (June 2022)") 

plotted
```

While the above chart provides a good overview of the relative shapes of the age-sex pyramids, we might be interested to know which age group is the largest for each gender in each planning area.

To do this, first we create a new column in the dataset, called "Key". The value in this column would be the count if the row corresponds with the largest age group for a gender in a planning area. If it is not the largest age group, then the value is simply a character space (i.e. a blank).

```{r}
final_data2 <- final_data %>%
  group_by(PA, Sex) %>% 
  mutate(Key = ifelse((max(Count) == Count), Count, " "))
```

Then we can label the largest age groups using geom_text(). We also add a caption to explain what each label means.

```{r}
plotted2 <- ggplot(final_data2, aes(x = AG, Population, fill = Sex)) + 
  geom_bar(data = filter(final_data2, Sex == "Females"), stat = "identity") + 
  geom_bar(data = filter(final_data2, Sex == "Males"),  stat = "identity") + 
  geom_text(aes(label=Key)) +
  scale_y_continuous(breaks = seq(-10000, 10000, 2500), 
                     labels = abs(seq(-10000, 10000, 2500))) +
  scale_x_continuous(breaks = seq(0, 90, 5)) +
  coord_flip() +
  facet_wrap(~ PA) +
  labs(x = "Lower Limit of Age Group", y = "Resident Count",
       title = "Age-Sex Pyramids of 9 Most Populous Planning Areas in Singapore (June 2022)", 
       caption = "Largest age groups for each gender in each planning area, are indicated with their count.")

plotted2
```

While this makes it easier to see the values corresponding to each of the largest age groups, perhaps our main interest is to convey anomalies and we are less interested in the detailed values. Instead of labelling the largest age groups with their count values, perhaps we can highlight the corresponding bars instead.

To do this, we need to create a new column, similar to what we did before. The difference here is that we then apply it to the chart's aesthetic fill (i.e. the colours of the bars).

```{r}
final_data3 <- final_data %>%
  group_by(PA, Sex) %>% 
  mutate(Key = ifelse((max(Count) == Count), "Largest Age Group", NA))

plotted3 <- ggplot(final_data3, aes(x = AG, Population, fill = Key)) + 
  geom_bar(data = filter(final_data3, Sex == "Females"), stat = "identity") + 
  geom_bar(data = filter(final_data3, Sex == "Males"),  stat = "identity") + 
  scale_y_continuous(breaks = seq(-10000, 10000, 2500), 
                     labels = abs(seq(-10000, 10000, 2500))) +
  scale_x_continuous(breaks = seq(0, 90, 5)) +
  coord_flip() +
  facet_wrap(~ PA) +
  labs(x = "Lower Limit of Age Group", y = "Resident Count",
       title = "Largest Age Groups, Male and Female")

plotted3
```

We see from the above a more visually striking contrast between the two planning areas that have a large difference between the largest age groups for the two genders, and the others.
