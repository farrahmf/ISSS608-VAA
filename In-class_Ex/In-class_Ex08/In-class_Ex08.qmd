---
title: "Network Graphing"
author: "farrahmf"
date: "11 March 2023"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

### Loading packages and importing data

Load packages. (We won't actually be using **graphlayouts** but good to know it exists.)

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

Import data: two datasets, one corresponding with the nodes and the other corresponding with the edges.

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

### Data preparation

#1 Note that although readr was able to identify that the values in the *SentTime* column were in hours-minutes-seconds (hms) format, it was not able to identify values in the *SentDate* column as dates. Below, the ***lubridate*** package to create a new column *SendDate* containing the values from *SentDate* in date format and another new column *Weekday* containing the corresponding week day.

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

\
#2 To make the dataset more useful for visualisation, we will aggregate the individual by date, senders, receivers, main subject and day of the week. In this case, each edge (connecting two different vertices) is "weighted" by the number of emails between the vertices.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
  summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

### Creating Network Objects

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)

GAStech_graph
```

\
From the output above, it is seen that the "active" object are the nodes. The code below activates the edges instead, thus R is able to "find" the column *Weight*, which exists only in the edges table.

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

### Plotting the Network Graph

Using **ggraph** (an extension of **ggplot2**). The node is coloured based on *Department*, and the width of lines (representing edges) will correspond to that edge's *Weight*.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

\
Using it with **facet**:

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

###  Incorporating Statistical Measures

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%  # See note.
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

*(Note that no new column "betweenness_centrality" is actually appended to the data table. Instead, the outcome of the measurement is passed straight into the object "g" for visualisation.)*

### Preparing data for visNetwork

Preparing the data model:

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

\
Plotting the network graph:

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

\
Adding interactivity (select the node you want - either from a dropdown menu or by clicking directly on the graph - and that node as well as its nearest nodes will be highlighted):

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
